# -*- coding: utf-8 -*-
"""generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YpF8KFNMZJ-Ck90nDP8q93WuGQ65XMqW
"""

import torch
import torch.nn as nn

class Generator(nn.Module):
    def __init__(self, noise_dim=100, output_dim=784):
        super(Generator, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(noise_dim, 256),
            nn.ReLU(),
            nn.Linear(256, output_dim),
            nn.Tanh()
        )

    def forward(self, z):
        return self.model(z)

import torch
import matplotlib.pyplot as plt

# Step 1: Instantiate the generator
generator = Generator()

# Step 2: Create random noise input (e.g., batch of 1, with noise_dim=100)
noise = torch.randn(1, 100)  # Shape: [1, 100]

# Step 3: Get the output from generator
output = generator(noise)  # Shape: [1, 784]

# Step 4: Reshape to image (28x28) and detach from computation graph
generated_image = output.view(28, 28).detach().numpy()

# Step 5: Visualize the generated image
plt.imshow(generated_image, cmap='gray')
plt.title("Generated Image from Generator")
plt.axis('off')
plt.show()

noise = torch.randn(16, 100)  # Batch of 16
outputs = generator(noise)    # Shape: [16, 784]

# Plot the images
fig, axs = plt.subplots(4, 4, figsize=(6, 6))
for i in range(16):
    axs[i//4, i%4].imshow(outputs[i].view(28, 28).detach().numpy(), cmap='gray')
    axs[i//4, i%4].axis('off')
plt.tight_layout()
plt.show()

